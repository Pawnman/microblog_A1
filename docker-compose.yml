x-api-config: &api-config
  build: api/src
  environment:
    - MONGO_URI=mongodb://mongo_db_node_01,mongo_db_node_02/?replicaSet=docker-replicaset
    - ELASTICSEARCH_URI=http://elasticsearch_node_01:9200,http://elasticsearch_node_02:9200
    - MEMCACHED_URI=memcached_node_01:11211,memcached_node_02:11211
  depends_on:
    mongo_cluster_init:
      condition: service_completed_successfully
    elasticsearch_node_01:
      condition: service_healthy
    elasticsearch_node_02:
      condition: service_healthy
    memcached_node_01:
      condition: service_healthy
    memcached_node_02:
      condition: service_healthy

x-mongodb-healthcheck: &mongodb-healthcheck
  healthcheck:
    test: echo 'db.runCommand("ping").ok' | mongosh 127.0.0.1:27017/test --quiet
    interval: 10s
    timeout: 10s
    retries: 30
    start_period: 40s

x-elasticsearch-healthcheck: &elasticsearch-healthcheck
  healthcheck:
    interval: 5s
    retries: 80
    test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://127.0.0.1:9200

x-memcached-healthcheck: &memcached-healthcheck
  healthcheck:
    test: echo stats | nc 127.0.0.1 11211
    interval: 10s
    retries: 60

services:
  api_node_01:
    <<: [ *api-config]
    ports:
      - 8001:8000

  api_node_02:
    <<: [ *api-config ]
    ports:
      - 8002:8000

  elasticsearch_node_01:
    image: elasticsearch:8.10.2
    <<: [ *elasticsearch-healthcheck ]
    environment:
      - node.name=elasticsearch_node_01
      - discovery.seed_hosts=[elasticsearch_node_02]
    env_file:
      - ./elasticsearch.env
    volumes:
      - ./data/elasticsearch_node_01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200

  elasticsearch_node_02:
    image: elasticsearch:8.10.2
    <<: [ *elasticsearch-healthcheck ]
    environment:
     - node.name=elasticsearch_node_02
     - discovery.seed_hosts=[elasticsearch_node_01]
    env_file:
      - ./elasticsearch.env
    volumes:
      - ./data/elasticsearch_node_02:/usr/share/elasticsearch/data

  mongo_db_node_01:
    image: mongo:7.0.2
    <<: [ *mongodb-healthcheck ]
    volumes:
      - ./data/mongo_node_01:/data/db
    command: mongod --replSet docker-replicaset
    ports:
      - 27017:27017

  mongo_db_node_02:
    image: mongo:7.0.2
    <<: [ *mongodb-healthcheck ]
    volumes:
      - ./data/mongo_node_02:/data/db
    command: mongod --replSet docker-replicaset

  mongo_cluster_init:
    image: mongo:7.0.2
    depends_on:
      mongo_db_node_01:
        condition: service_healthy
      mongo_db_node_02:
        condition: service_healthy
    volumes:
      - ./init-mongo.js:/scripts/init-mongo.js:ro
    entrypoint: [ "mongosh", "--host", "mongo_db_node_01", "--file", "/scripts/init-mongo.js"]

  memcached_node_01:
    image: memcached
    <<: [ *memcached-healthcheck ]
    ports:
      - 11211:11211

  memcached_node_02:
    image: memcached
    <<: [ *memcached-healthcheck ]

  nginx:
    image: nginx
    ports:
      - 80:80
    depends_on:
      - api_node_01
      - api_node_02
    volumes:
      - ./data/nginx/cache:/data/nginx/cache
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
